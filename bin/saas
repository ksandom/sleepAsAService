#!/bin/bash
# Sleep As A Service - Automatically put your laptop back to sleep if the lid is closed.
# Use-case: Sleep has already been triggered and successful on your laptop. Soomething wakes it, like the laptop getting squashed a little causing a keypress. When you ome back to your bag, it's hot and the laptop's battering is flat.

# NOTE Can be run in userspace. Ie no need for root.

# Closed messages. Have fun!
#MSG-closed Oh shit! I'm supposed to be sleeping. Going back to bed.
#MSG-closed YIKES! Don't look, I was taking a shower.
#MSG-closed No, I have a bigger dinosaurzzzzzzzz.
#MSG-closed I had a bad dream. I dreamt that I was in a bag and it was all dark.
#MSG-closed Dear sir! You pushed my buttons.
#MSG-closed Screw you, I'm going back to sleep.
#MSG-closed Screw you guys, I'm going home.


function once
{
    if [ "`getState`" == "closed" ]; then
        echo "`date` `getSillyMessage MSG-closed` (Should have been sleeping. Going to try that again.)"
        doSleep
    # else
        # No need to output anything at the moment.
    fi
}

function doLoop
{
    interval=${1:-60}
    
    once
    while sleep $interval; do
        once
    done
}



function getState
{
    acpiFile="/proc/acpi/button/lid/LID0/state"
    if [ -f "$acpiFile" ]; then
        sed 's/state: *//g' "$acpiFile"
    fi
}

function doSleep
{
    systemctl suspend
}

function getSillyMessage
{
    key="$1"
    grep "^#$key " $0 | # Get the messages from withing the file.
        cut -d\  -f 2- | # Remove the search at the beginning.
        sort -R | # Sort randomly.
        head -n 1 # Choose the first one.
}

function testMessages
{
    for key in MSG-closed; do
        echo "$key: `getSillyMessage $key`"
    done
}




case $1 in
    "once") # Run once, right now.
        once
    ;;
    "loop") # Run in a continous loop. Optionally specify an interval in the number of seconds as a second parameter.
        echo "This is intended for debugging only." >&2
        doLoop $2
    ;;
    "testMessages")
        testMessages
    ;;
esac
